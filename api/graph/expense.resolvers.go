package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.54

import (
	"context"

	errapi "github.com/beka-birhanu/finance-go/api/error"
	"github.com/beka-birhanu/finance-go/api/graph/model"
	"github.com/beka-birhanu/finance-go/api/graph/utils"
	generalUtil "github.com/beka-birhanu/finance-go/api/utils"
	expensqry "github.com/beka-birhanu/finance-go/application/expense/query"
	"github.com/google/uuid"
)

// Expense is the resolver for the expense field.
func (r *queryResolver) Expense(ctx context.Context, userID uuid.UUID, id uuid.UUID) (*model.Expense, error) {
	if err := generalUtil.ConfirmUserID(ctx, userID); err != nil {
		return nil, utils.NewGQLError(err.(errapi.Error))
	}
	expense, err := r.getExpenseHandler.Handle(&expensqry.GetQuery{UserId: userID, ExpenseId: id})
	if err != nil {

		return nil, utils.NewGQLError(errapi.NewBadRequest(err.Error()))
	}
	return utils.NewExpense(expense), nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
